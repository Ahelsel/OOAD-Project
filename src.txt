// File: /TowerRenderer.java

public class TowerRenderer {
    private Level level;
    private SpriteBatch batch;
    private TextureRegion towerTexture;
    private TextureRegion baseTexture;

    public TowerRenderer(Level level) {
        this.level = level;
        this.batch = new SpriteBatch();
        this.towerTexture = new TextureRegion (new Texture(Gdx.files.internal("towers/Cannon.png")));
        this.baseTexture = new TextureRegion (new Texture(Gdx.files.internal("towers/Tower.png")));
    }

    public void render() {
        batch.begin();
        for (Tower tower : level.getTowerManager().getTowers()) {
            float towerX = tower.getTile().getXCoordinate().floatValue() + 5;
            float towerY = tower.getTile().getYCoordinate().floatValue() + 5;

            batch.draw(baseTexture, towerX, towerY, 20, 20, 40, 40, 1f, 1f, 0f);

            float towerRotation = 0;
            if (tower.getTarget() != null) {
                float enemyX = tower.getTarget().getX() + 25;
                float enemyY = tower.getTarget().getY() + 25;
                towerRotation = (float) Math.toDegrees(Math.atan2(enemyY - (towerY + 20), enemyX - (towerX + 20))) - 90;
            }

            batch.draw(towerTexture, towerX + 5, towerY + 5, 15, 15, 30, 30, 1f, 1f, towerRotation);
        }
        batch.end();
    }

    public void dispose() {
        batch.dispose();
        towerTexture.getTexture().dispose();
        baseTexture.getTexture().dispose();
    }
}
// File: /GuiRenderer.java

public class GuiRenderer {
    private BitmapFont font;
    private SpriteBatch batch;
    private ShapeRenderer shapeRenderer;
    private Level level;

    public GuiRenderer(Level level) {
        font = new BitmapFont();
        batch = new SpriteBatch();
        this.level = level;
        shapeRenderer = new ShapeRenderer();
    }

    public void renderEnemiesRemaining() {
        batch.begin();
        font.draw(batch, "Enemies remaining: " + level.getNumEnemies(), 10, level.getHeight() * 50 - 10);
        batch.end();
    }

    public void renderGameOver(float alpha) {
        shapeRenderer.begin(ShapeRenderer.ShapeType.Filled);
        shapeRenderer.setColor(0, 0, 0, alpha);
        shapeRenderer.rect(0, 0, level.getWidth() * 50, level.getHeight() * 50);
        shapeRenderer.end();

        batch.begin();
        font.setColor(1, 1, 1, alpha);
        font.draw(batch, "Game Over", level.getWidth() * 25 - 50, level.getHeight() * 25);
        batch.end();
    }

    public void dispose() {
        font.dispose();
        batch.dispose();
    }

}
// File: /LevelRenderer.java

public class LevelRenderer {
    private Level level;
    private SpriteBatch batch;
    private Texture grassTexture;
    private Texture pathTexture;

    public LevelRenderer(Level level ) {
        this.level = level;
        this.batch = new SpriteBatch();
        this.pathTexture = new Texture(Gdx.files.internal("path.png"));
        this.grassTexture = new Texture(Gdx.files.internal("grass.png"));
    }

    public void render() {
        batch.begin();
        for (Float i = 0f; i < level.getWidth(); i++) {
            for (Float j = 0f; j < level.getHeight(); j++) {
                Tile tile = level.getTile(i.intValue(), j.intValue());
                if (tile.isWalkable()) {
                    batch.draw(pathTexture, i*50, j*50, 50, 50);
                } else {
                    batch.draw(grassTexture, i*50, j*50, 50, 50);
                }
            }
        }
        batch.end();
    }

    public void dispose() {
        this.pathTexture.dispose();
        this.grassTexture.dispose();
    }

}
// File: /EnemyRenderer.java

public class EnemyRenderer {
    private Level level;
    private SpriteBatch batch;
    private Animation<TextureRegion> entityAnimation;
    private Array<Texture> textures;

    public EnemyRenderer(Level level) {
        textures = new Array<>();
        this.level = level;
        this.batch = new SpriteBatch();
        loadEntityAnimation();
    }

    public void render(Float animationTime) {
        batch.begin();
        Iterator<Enemy> iterator = level.getEnemies().iterator();
        while (iterator.hasNext()) {
            Enemy enemy = iterator.next();
            updateEnemyPosition(enemy);
            findDirection(enemy);
            TextureRegion currentFrame = entityAnimation.getKeyFrame(animationTime, true);
            TextureRegion rotatedFrame = new TextureRegion(currentFrame);
            if (enemy.getDirection() == Enemy.Direction.UP) {
                rotatedFrame.setRegion(currentFrame.getRegionX(), currentFrame.getRegionY(), currentFrame.getRegionHeight(), currentFrame.getRegionWidth());
                batch.draw(rotatedFrame, enemy.getX(), enemy.getY(), 25, 25, 50, 50, 1f, 1f, 90f);
            } else if (enemy.getDirection() == Enemy.Direction.DOWN) {
                rotatedFrame.setRegion(currentFrame.getRegionX(), currentFrame.getRegionY(), currentFrame.getRegionHeight(), currentFrame.getRegionWidth());
                batch.draw(rotatedFrame, enemy.getX(), enemy.getY(), 25, 25, 50, 50, 1f, 1f, 270f);
            } else {
                batch.draw(rotatedFrame, enemy.getX(), enemy.getY(), 50, 50);
            }
            updateTowerTargets(enemy);
            if (enemy.getX() > level.getWidth() * 50 || enemy.getY() > level.getHeight() * 50) {
                iterator.remove();
            }
        }
        batch.end();
    }

    private void updateTowerTargets(Enemy enemy) {
        for (Tower tower : level.getTowerManager().getTowers()) {
            if (isEnemyInTowerRadius(tower, enemy)) {
                if (tower.getTarget() == null) {
                    tower.setTarget(enemy);
                }
            } else if (tower.getTarget() == enemy) {
                tower.setTarget(null);
            }
        }
    }

    private boolean isEnemyInTowerRadius(Tower tower, Enemy enemy) {
        float towerX = tower.getTile().getXIndex();
        float towerY = tower.getTile().getYIndex();
        float enemyX = enemy.getX() / 50f;
        float enemyY = enemy.getY() / 50f;

        Boolean returnValue = Math.abs(towerX - enemyX) <= 1 && Math.abs(towerY - enemyY) <= 1;

        return Math.abs(towerX - enemyX) <= 1.5f && Math.abs(towerY - enemyY) <= 1.5f;
    }

    public void findDirection(Enemy enemy) {
        Iterator<PivotPoint> iterator = enemy.getPathFinder().getPivotPoints().iterator();
        Float proximity = 5.0f;

        while (iterator.hasNext()) {
            PivotPoint pivot = iterator.next();
            if (Math.abs(enemy.getX() - pivot.getX()) <= proximity && Math.abs(enemy.getY() - pivot.getY()) <= proximity) {
                switch (pivot.getDirection()) {
                    case LEFT:
                        if (enemy.getDirection() == Enemy.Direction.DOWN) {
                            enemy.setDirection(Enemy.Direction.RIGHT);
                        } else {
                            enemy.setDirection(Enemy.Direction.UP);
                        }
                        break;
                    case RIGHT:
                        if (enemy.getDirection() == Enemy.Direction.UP) {
                            enemy.setDirection(Enemy.Direction.RIGHT);
                        } else {
                            enemy.setDirection(Enemy.Direction.DOWN);
                        }
                        break;
                    default:
                        break;
                }
                iterator.remove();
                break;
            }
        }
    }

    public void dispose() {
        batch.dispose();
        for (Texture texture : textures) {
            texture.dispose();
        }
    }

    private void loadEntityAnimation() {
        Array<TextureRegion> frames = new Array<>();
        for (int i = 0; i < 17; i++) {
            String filename = "entityMove/move" + i + ".png";
            Texture texture = new Texture(Gdx.files.internal(filename));
            textures.add(texture);
            TextureRegion frameTexture = new TextureRegion(texture);
            frames.add(new TextureRegion(frameTexture));
        }
        entityAnimation = new Animation<>(0.1f, frames);
    }

    public void updateEnemyPosition(Enemy enemy) {
        Float deltaX = 0.0f;
        Float deltaY = 0.0f;
        if (enemy.getDirection() == Enemy.Direction.DOWN) {
            deltaY = (-10.0f / 60.0f) * enemy.getSpeedMultiplier();
        } else if (enemy.getDirection() == Enemy.Direction.UP) {
            deltaY = (10.0f / 60.0f) * enemy.getSpeedMultiplier();
        } else if (enemy.getDirection() == Enemy.Direction.RIGHT) {
            deltaX = (10.0f / 60.0f) * enemy.getSpeedMultiplier();
        }
        enemy.move(deltaX, deltaY);
    }

}